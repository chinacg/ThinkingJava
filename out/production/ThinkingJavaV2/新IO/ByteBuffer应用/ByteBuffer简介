  速度的提高来自于所使用的结构更接近于操作系统执行I/O的方式:通道和缓冲器.通道是一个包含数据的容器,
缓冲器充当数据的传送器,我们并没有直接和通道交互,我们只是和缓冲器交互,并把缓冲器派送到通道.通道只能
从缓冲器获得数据和发送数据.
  唯一与通道交互的缓冲器是ByteBuffer,它是可以存储未加工字节的缓冲器.它并没有办法输出和读取对象.
  有三个类可以产生FileChannel,分别是FileInputSteam,FileOutputSteam,以及可以读和写的RandomAccessFile.
这些是字节操纵流,与低层的nio性质一致.Reader和Writer这种字符模式类不能用于产生通道,但是java.io.chanels.Channels类
提供了实用的方法,用以在通道中产生Reader和Writer.


   缓冲器的细节:
   buffer由数据和可以高效地访问及操纵这些数据的四个索引组成,这四个索引是mark(标记),position(位置),limit(界限)和capacity（容量）.

   ------------------------------------------------------------------------------------------
   capacity()   返回缓冲器容量

   clear()      清空缓冲区,将position设置为0,limit设置为容量.可以用这个方法覆写缓冲区

   flip()       将limit设置为position,position设置为0.此方法用于准备从缓冲区读取已经写入的数据

   limit()      返回limit的值

   limit(int lim)  设置limit的值

   mark()       将mark设置为position

   position()   返回position的值

   position(int pos) 设置position的值

   remaining()  返回（limit-position)

   hasRemaining()  若有介于position和limit之间的元素,则返回true


